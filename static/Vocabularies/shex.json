{
  "iri": "http://www.w3.org/ns/shex#",
  "description": "This document describes the RDFS vocabulary description used in the Shape Expression Language (ShEx) [[shex-semantics]] along with the default JSON-LD Context and shape expression to validate RDF versions of shapes.",
  "label": "Shape Expression Vocabulary",
  "prefix": "shex",
  "items": {
    "Annotation": {
      "category": "class",
      "description": "Annotations provide a format-independent way to provide additional information about elements in a schema.",
      "label": "Annotation"
    },
    "EachOf": {
      "category": "class",
      "description": "A TripleExpression composed of one or more sub-expressions, all of which must match.",
      "label": "Each Of"
    },
    "TripleExpression": {
      "category": "class",
      "description": "The abstract class of Triple Expressions.",
      "label": "Triple Expression"
    },
    "IriStem": {
      "category": "class",
      "description": "An IRI prefix used for matching IRIs.",
      "label": "IRI Stem"
    },
    "Stem": {
      "category": "class",
      "description": "Abstract class for Stems",
      "label": "Stem"
    },
    "IriStemRange": {
      "category": "class",
      "description": "An IRI prefix (or wildcard) along with a set of excluded values, used for node matching.",
      "label": "IRI StemRange"
    },
    "StemRange": {
      "category": "class",
      "description": "Abstract Class for Stem Ranges",
      "label": "StemRange"
    },
    "Language": {
      "category": "class",
      "description": "An Language tag used for matching Literal Languages.",
      "label": "Language"
    },
    "LanguageStem": {
      "category": "class",
      "description": "An Language prefix used for matching Literal Languages.",
      "label": "Language Stem"
    },
    "LanguageStemRange": {
      "category": "class",
      "description": "An Language prefix (or wildcard) along with a set of excluded values, used for node matching.",
      "label": "Language StemRange"
    },
    "LiteralStem": {
      "category": "class",
      "description": "An Literal prefix used for matching Literals.",
      "label": "Literal Stem"
    },
    "LiteralStemRange": {
      "category": "class",
      "description": "An Literal prefix (or wildcard) along with a set of excluded values, used for node matching.",
      "label": "Literal StemRange"
    },
    "NodeConstraint": {
      "category": "class",
      "description": "A constraint on the type or value of an RDF Node.",
      "label": "Node Constraint"
    },
    "ShapeExpression": {
      "category": "class",
      "description": "The abstract class of Shape Expressions.",
      "label": "Shape Expression"
    },
    "NodeKind": {
      "category": "class",
      "description": "The set of kinds of RDF Nodes.",
      "label": "Node Kind"
    },
    "OneOf": {
      "category": "class",
      "description": "A TripleExpression composed of one or more sub-expressions, one of which must match.",
      "label": "One Of"
    },
    "Schema": {
      "category": "class",
      "description": "A Schema contains the set of shapes, used for matching a focus node.",
      "label": "Schema"
    },
    "SemAct": {
      "category": "class",
      "description": "A list of Semantic Actions that serve as an extension point for Shape Expressions. They appear in lists in Schema's startActs and Shape, OneOf, EachOf and TripleConstraint's semActs.",
      "label": "Semantic Actions"
    },
    "Shape": {
      "category": "class",
      "description": "A shapes schema is captured in a Schema object where shapes is a mapping from shape label to shape expression.",
      "label": "Shape Or"
    },
    "ShapeAnd": {
      "category": "class",
      "description": "A ShapeExpression composed of one or more sub-expressions, all of which must match.",
      "label": "Shape And"
    },
    "ShapeExternal": {
      "category": "class",
      "description": "A reference to a shape defined in some external Schema.",
      "label": "Shape External"
    },
    "ShapeNot": {
      "category": "class",
      "description": "A ShapeNot is satisfied when it’s included ShapeExpression is not satisfied.",
      "label": "Shape Not"
    },
    "ShapeOr": {
      "category": "class",
      "description": "A ShapeExpression composed of one or more sub-expressions, one of which must match.",
      "label": "Shape Or"
    },
    "TripleConstraint": {
      "category": "class",
      "description": "A constraint on a triple having a specific predicate and optionally a shape expression used for matching values.",
      "label": "Triple Constraint"
    },
    "Wildcard": {
      "category": "class",
      "description": "Indicates that a stem is a Wildcard, rather than a URI prefix.",
      "label": "Wildcard"
    },
    "annotation": {
      "category": "property",
      "description": "Annotations on a TripleExpression.",
      "label": "annotation"
    },
    "closed": {
      "category": "property",
      "description": "Indicates that a Shape is closed, meaning that it may contain no property values other than those used within TripleConstraints.",
      "label": "closed"
    },
    "code": {
      "category": "property",
      "description": "Code executed by Semantic Action.",
      "label": "code"
    },
    "datatype": {
      "category": "property",
      "description": "A datatype constraint.",
      "label": "datatype"
    },
    "exclusion": {
      "category": "property",
      "description": "Values that are excluded from value matching.",
      "label": "exclusion"
    },
    "expression": {
      "category": "property",
      "description": "Expression associated with the TripleExpression.",
      "label": "expression"
    },
    "expressions": {
      "category": "property",
      "description": "List of 2 or more expressions associated with the TripleExpression.",
      "label": "expressions"
    },
    "extends": {
      "category": "property",
      "description": "Base shape expressions for this shape.",
      "label": "extends"
    },
    "extra": {
      "category": "property",
      "description": "Properties which may have extra values beyond those matched through a constraint.",
      "label": "extra"
    },
    "flags": {
      "category": "property",
      "description": "Regular expression flags",
      "label": "flags"
    },
    "fractiondigits": {
      "category": "property",
      "description": "for \"fractiondigits\" constraints, v is less than or equals the number of digits to the right of the decimal place in the XML Schema canonical form[xmlschema-2] of the value of n, ignoring trailing zeros.",
      "label": "fraction digits"
    },
    "numericFacet": {
      "category": "property",
      "description": "Abstract property of numeric facets on a NodeConstraint.",
      "label": ""
    },
    "inverse": {
      "category": "property",
      "description": "Constrains the subject of a triple, rather than the object.",
      "label": "inverse"
    },
    "languageTag": {
      "category": "property",
      "description": "The value used to match the language tag of a language-tagged string.",
      "label": "language tag"
    },
    "length": {
      "category": "property",
      "description": "The exact length of the value of the cell.",
      "label": "length"
    },
    "stringFacet": {
      "category": "property",
      "description": "An abstract property of string facets on a NodeConstraint.",
      "label": ""
    },
    "max": {
      "category": "property",
      "description": "Maximum number of times this TripleExpression may match; -1 for “*”",
      "label": "maximum cardinality"
    },
    "maxexclusive": {
      "category": "property",
      "description": "An atomic property that contains a single number that is the maximum valid value (exclusive).",
      "label": "max exclusive"
    },
    "maxinclusive": {
      "category": "property",
      "description": "An atomic property that contains a single number that is the maximum valid value (inclusive).",
      "label": "max inclusive"
    },
    "maxlength": {
      "category": "property",
      "description": "A numeric atomic property that contains a single integer that is the maximum length of the value.",
      "label": "max length"
    },
    "min": {
      "category": "property",
      "description": "Minimum number of times this TripleExpression may match.",
      "label": "minimum cardinatliy"
    },
    "minexclusive": {
      "category": "property",
      "description": "An atomic property that contains a single number that is the minimum valid value (exclusive).",
      "label": "min exclusive"
    },
    "mininclusive": {
      "category": "property",
      "description": "An atomic property that contains a single number that is the minimum valid value (inclusive).",
      "label": "min inclusive"
    },
    "minlength": {
      "category": "property",
      "description": "An atomic property that contains a single integer that is the minimum length of the value.",
      "label": "min length"
    },
    "name": {
      "category": "property",
      "description": "Identifier of SemAct extension.",
      "label": "name"
    },
    "nodeKind": {
      "category": "property",
      "description": "Restiction on the kind of node matched; restricted to the defined instances of NodeKind. One of shex:iri, shex:bnode, shex:literal, or shex:nonliteral.",
      "label": "node kind"
    },
    "xsFacet": {
      "category": "property",
      "description": "An abstract property of string and numeric facets on a NodeConstraint.",
      "label": ""
    },
    "object": {
      "category": "property",
      "description": "The object of an Annotation.",
      "label": "object"
    },
    "pattern": {
      "category": "property",
      "description": "A regular expression used for matching a value.",
      "label": "pattern"
    },
    "predicate": {
      "category": "property",
      "description": "The predicate of a TripleConstraint or Annotation.",
      "label": "predicate"
    },
    "semActs": {
      "category": "property",
      "description": "Semantic Actions on this TripleExpression.",
      "label": "semantic action"
    },
    "shapeExpr": {
      "category": "property",
      "description": "Shape Expression referenced by this shape.",
      "label": "shape expression"
    },
    "shapeExprs": {
      "category": "property",
      "description": "A list of 2 or more Shape Expressions referenced by this shape.",
      "label": "shape expressions"
    },
    "shapes": {
      "category": "property",
      "description": "Shapes in this Schema.",
      "label": "shapes"
    },
    "start": {
      "category": "property",
      "description": "A ShapeExpression matched against the focus node prior to any other mapped expressions.",
      "label": "start"
    },
    "startActs": {
      "category": "property",
      "description": "Semantic Actions run on the Schema.",
      "label": "start actions"
    },
    "stem": {
      "category": "property",
      "description": "A stem value used for matching or excluding values.",
      "label": "stem"
    },
    "totaldigits": {
      "category": "property",
      "description": "for \"totaldigits\" constraints, v equals the number of digits in the XML Schema canonical form[xmlschema-2] of the value of n",
      "label": "total digits"
    },
    "valueExpr": {
      "category": "property",
      "description": "A ShapeExpression used for matching the object (or subject if inverted) of a TripleConstraint.",
      "label": "value expression"
    },
    "values": {
      "category": "property",
      "description": "A value restriction on a NodeConstraint.",
      "label": "values"
    }
  }
}