{
  "iri": "http://www.w3.org/ns/auth/cert#",
  "description": "Ontology for Certificates and crypto stuff. This is in development. Some other ontologies to look at: * http://www.w3.org/2000/10/swap/crypto + has cwm builtins: http://www.w3.org/2000/10/swap/doc/Trust - a bit old perhaps. It imports daml+oil - would help to be more completely specified - uses literals as subjects a little liberally, which makes this a bit difficult to work with frameworks that don't permit this * http://xmlns.com/wot/0.1/ - limited very much to PGP (though on can map PGP to X509) - a little coarse grained, mixes up the PGP certificate with the PGP public key * Todo: - add some classes and relations for DSA - should this all be in one file? Or should this be cut up a little? Say one file for the general CERT ontology, and then files for RSA, DSA, PGP, etc... Or perhaps it does not really matter? - expand more on the certification side of things - verify this by security experts - owl2 has some constructs for combined inverse functional properties. This may be useful to use in defining an RSA key which is identified by two numbers. - also create html version of the spec by using this as a template. - should comments such as this be in html?",
  "label": "Ontology for Certificates and crypto stuff.",
  "prefix": "cert",
  "items": {
    "Certificate": {
      "category": "class",
      "description": "A certificate is a Document that is signed. As explained here http://www.pgpi.org/doc/pgpintro/#p16 'A digital certificate consists of three things: * A public key. * Certificate information. ('Identity' information about the user, such as name, user ID, and so on.) * One or more digital signatures.'",
      "label": "Certificate"
    },
    "Key": {
      "category": "class",
      "description": "the class of keys"
    },
    "PGPCertificate": {
      "category": "class",
      "description": "the class of PGP Certificates",
      "label": "PGPCertificate"
    },
    "PrivateKey": {
      "category": "class",
      "description": "Private Key",
      "label": "PrivateKey"
    },
    "PublicKey": {
      "category": "class",
      "description": "Public Key",
      "label": "PublicKey"
    },
    "RSAKey": {
      "category": "class",
      "description": "The union of the public and private components of an RSAKey. Usually those pieces are not kept together",
      "label": "RSA Key"
    },
    "RSAPublicKey": {
      "category": "class",
      "description": "The RSA public key.  Padded message m are encrypted by applying the function modulus(power(m,exponent),modulus)",
      "label": "RSA Public Key"
    },
    "Signature": {
      "category": "class",
      "description": "the class of signtatures",
      "label": "Signature"
    },
    "X509Certificate": {
      "category": "class",
      "description": "the class of X509 Certificates",
      "label": "X509Certificate"
    },
    "exponent": {
      "category": "property",
      "description": "The exponent used to encrypt the message. Number chosen between 1 and the totient(p*q). Often named 'e' .",
      "label": "exponent"
    },
    "modulus": {
      "category": "property",
      "description": "<p>The modulus of an RSA public and private key. Or the modulus of a DSA Key. The modulus is encoded as a hex binary. The binary is the same as the one encoded in the <a href=\"http://www.w3.org/TR/xmldsig-core/#sec-CryptoBinary\">XML DSIG CryptoBinary</a> </p> <blockquote> This specification defines the ds:CryptoBinary simple type for representing arbitrary-length integers (e.g. \"bignums\") in XML as octet strings. The integer value is first converted to a \"big endian\" bitstring. The bitstring is then padded with leading zero bits so that the total number of bits == 0 mod 8 (so that there are an integral number of octets). If the bitstring contains entire leading octets that are zero, these are removed (so the high-order octet is always non-zero). </blockquote> <p>The only difference is that the octet string is then encoded using either xsd:base64Binary or xsd:hexBinary. Currently for all usages of this relation, the xsd:hexBinary datatype should be used until the SPARQL working group specifies specifies in its <a href=\"http://www.w3.org/TR/sparql11-entailment/#DEntRegime\">D-Entailment</a> that those two types are equivalent.</p> <p>It would have been better had there been a hexInteger datatype that was standard and supported by all tools.</p>",
      "label": "modulus"
    },
    "privateExponent": {
      "category": "property",
      "description": "The exponent used to decrypt the message calculated as public_exponent*private_exponent = 1 modulo totient(p*q) The private exponent is often named 'd'",
      "label": "private"
    },
    "identity": {
      "category": "property",
      "description": "the identity of the public key. This is the entity that knows the private key and so can decrypt messages encrypted with the public key, or encrypt messages that can be decrypted with the public key.",
      "label": "identity"
    },
    "key": {
      "category": "property",
      "description": "relates an agent to a key - most often the public key.",
      "label": "key"
    }
  }
}