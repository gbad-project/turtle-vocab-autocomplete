{
  "iri": "http://datashapes.org/dash#",
  "description": "DASH is a SHACL library for frequently needed features and design patterns. The constraint components in this library are 100% standards compliant and will work on any engine that fully supports SHACL.",
  "label": "DASH Data Shapes Vocabulary",
  "prefix": "dash",
  "items": {
    "APIStatus": {
      "category": "class",
      "description": "The class of possible values for dash:apiStatus.",
      "label": "API Status"
    },
    "PropertyRole": {
      "category": "class",
      "description": "The class of roles that a property (shape) may take for its focus nodes.",
      "label": "Property role"
    },
    "FailureResult": {
      "category": "class",
      "description": "A result representing a validation failure such as an unsupported recursion.",
      "label": "Failure result"
    },
    "FailureTestCaseResult": {
      "category": "class",
      "description": "Represents a failure of a test case.",
      "label": "Failure test case result"
    },
    "TestCaseResult": {
      "category": "class",
      "description": "Base class for results produced by running test cases.",
      "label": "Test case result"
    },
    "GraphUpdate": {
      "category": "class",
      "description": "A suggestion consisting of added and/or deleted triples, represented as rdf:Statements via dash:addedTriple and dash:deletedTriple.",
      "label": "Graph update"
    },
    "Suggestion": {
      "category": "class",
      "description": "Base class of suggestions that modify a graph to \"fix\" the source of a validation result.",
      "label": "Suggestion"
    },
    "MultiFunction": {
      "category": "class",
      "description": "A multi-function is a function that can return zero or more result objects consisting of one or more result variables. While normal (SPARQL/SHACL) functions can only return a single result node, multi-functions may not only return multiple nodes but even multiple individual variables per solution.  A common way of defining multi-functions is by wrapping a SPARQL SELECT query, using dash:SPARQLMultiFunction. However, some MultiFunctions (in TopBraid) may also be implemented natively.",
      "label": "Multi-function"
    },
    "SPARQLConstructTemplate": {
      "category": "class",
      "description": "Encapsulates one or more SPARQL CONSTRUCT queries that can be parameterized. Parameters will become pre-bound variables in the queries.",
      "label": "SPARQL CONSTRUCT template"
    },
    "SPARQLMultiFunction": {
      "category": "class",
      "description": "A multi-function based on a SPARQL SELECT query. The query gets executed with the arguments pre-bound to the variables declared as parameters. The results of the multi-function are all result bindings from the SPARQL result set.",
      "label": "SPARQL multi-function"
    },
    "SPARQLSelectTemplate": {
      "category": "class",
      "description": "Encapsulates a SPARQL SELECT query that can be parameterized. Parameters will become pre-bound variables in the query.",
      "label": "SPARQL SELECT template"
    },
    "SPARQLUpdateSuggestionGenerator": {
      "category": "class",
      "description": "A SuggestionGenerator based on a SPARQL UPDATE query (sh:update), producing an instance of dash:GraphUpdate. The INSERTs become dash:addedTriple and the DELETEs become dash:deletedTriple. The WHERE clause operates on the data graph with the pre-bound variables $focusNode, $predicate and $value, as well as the other pre-bound variables for the parameters of the constraint.  In many cases, there may be multiple possible suggestions to fix a problem. For example, with sh:maxLength there are many ways to slice a string. In those cases, the system will first iterate through the result variables from a SELECT query (sh:select) and apply these results as pre-bound variables into the UPDATE query.",
      "label": "SPARQL UPDATE suggestion generator"
    },
    "SuggestionGenerator": {
      "category": "class",
      "description": "Base class of objects that can generate suggestions (added or deleted triples) for a validation result of a given constraint component.",
      "label": "Suggestion generator"
    },
    "ScriptFunction": {
      "category": "class",
      "description": "Script functions can be used from SPARQL queries and will be injected into the generated prefix object (in JavaScript, for ADS scripts). The dash:js will be inserted into a generated JavaScript function and therefore needs to use the return keyword to produce results. These JS snippets can access the parameter values based on the local name of the sh:Parameter's path. For example ex:value can be accessed using value.  SPARQL use note: Since these functions may be used from any data graph and any shapes graph, they must not rely on any API apart from what's available in the shapes graph that holds the rdf:type triple of the function itself. In other words, at execution time from SPARQL, the ADS shapes graph will be the home graph of the function's declaration.",
      "label": "Script function"
    },
    "ShapeScript": {
      "category": "class",
      "description": "A shape script contains extra code that gets injected into the API for the associated node shape. In particular you can use this to define additional functions that operate on the current focus node (the this variable in JavaScript).",
      "label": "Shape script"
    },
    "SuccessResult": {
      "category": "class",
      "description": "A result representing a successfully validated constraint.",
      "label": "Success result"
    },
    "SuccessTestCaseResult": {
      "category": "class",
      "description": "Represents a successful run of a test case.",
      "label": "Success test case result"
    },
    "SuggestionResult": {
      "category": "class",
      "description": "Class of results that have been produced as suggestions, not through SHACL validation. How the actual results are produced is up to implementers. Each instance of this class should have values for sh:focusNode, sh:resultMessage, sh:resultSeverity (suggested default: sh:Info), and dash:suggestion to point at one or more suggestions.",
      "label": "Suggestion result"
    },
    "TestEnvironment": {
      "category": "class",
      "description": "Abstract base class for test environments, holding information on how to set up a test case.",
      "label": "Test environment"
    },
    "Action": {
      "category": "class",
      "description": "An executable command triggered by an agent, backed by a Script implementation. Actions may get deactivated using sh:deactivated.",
      "label": "Action"
    },
    "ShapeClass": {
      "category": "class",
      "description": "A class that is also a node shape. This class can be used as rdf:type instead of the combination of rdfs:Class and sh:NodeShape.",
      "label": "Shape class"
    },
    "Script": {
      "category": "class",
      "description": "An executable unit implemented in one or more languages such as JavaScript.",
      "label": "Script"
    },
    "ActionGroup": {
      "category": "class",
      "description": "A group of ResourceActions, used to arrange items in menus etc. Similar to sh:PropertyGroups, they may have a sh:order and should have labels (in multiple languages if applicable).",
      "label": "Action group"
    },
    "ActionTestCase": {
      "category": "class",
      "description": "A test case that evaluates a dash:Action using provided input parameters. Requires exactly one value for dash:action and will operate on the test case's graph (with imports) as both data and shapes graph.  Currently only supports read-only actions, allowing the comparison of actual results with the expected results.",
      "label": "Action test case"
    },
    "TestCase": {
      "category": "class",
      "description": "A test case to verify that a (SHACL-based) feature works as expected.",
      "label": "Test case"
    },
    "SingleEditor": {
      "category": "class",
      "description": "An editor for individual value nodes.",
      "label": "Single editor"
    },
    "SingleViewer": {
      "category": "class",
      "description": "A viewer for a single value.",
      "label": "Single viewer"
    },
    "ChangeScript": {
      "category": "class",
      "description": "Class of ADS scripts that are executed after edits to the data graph were made, but within the same edit.  These scripts may access the current changes from the graphs with names dataset.addedGraphURI and dataset.deletedGraphURI to learn about which resource values have been added or deleted. For example query them using graph.withDataGraph(dataset.addedGraphURI, ...) or via SPARQL's GRAPH keyword.  Change scripts may then perform further changes which would again become visible to other change scripts. They MUST NOT have other side effects though, because they may get executed in Preview mode, or the change may cause constraint violations and then be rejected. For side effects, after the change has been applied, use commit scripts (dash:CommitScript).  Change scripts are executed by their relative sh:order, with a default value of 0. Use lower values to execute before other scripts.",
      "label": "Change script"
    },
    "CommitScript": {
      "category": "class",
      "description": "Class of ADS scripts that are executed after edits to the data graph were made and have been committed.  These scripts may access the changes that have just happened from the graphs with names dataset.addedGraphURI and dataset.deletedGraphURI to learn about which resource values have been added or deleted. For example query them using graph.withDataGraph(dataset.addedGraphURI, ...) or via SPARQL's GRAPH keyword.  Commit scripts may then perform side effects such as updating other graphs or sending out notifications to external systems. For edits that should be made within a finishing change, use change scripts (dash:ChangeScript).  Commit scripts are executed by their relative sh:order, with a default value of 0. Use lower values to execute before other scripts.",
      "label": "Commit script"
    },
    "Constructor": {
      "category": "class",
      "description": "A script that is executed when a new instance of the class associated via dash:constructor is created, e.g. from a New button. Such scripts typically declare one or more parameters that are collected from the user when the script starts. The values of these parameters can be used as named variables in the script for arbitrary purposes such as setting the URI or initializing some property values of the new instance.  The variable focusNode will hold the named node of the selected type, for example when a constructor is associated with a superclass but the user has pressed New for a subclass.  The last expression of the script will be used as result of the constructor, so that the surrounding tool knows which resource shall be navigated to next.",
      "label": "Constructor"
    },
    "Editor": {
      "category": "class",
      "description": "The class of widgets for editing value nodes.",
      "label": "Editor"
    },
    "Widget": {
      "category": "class",
      "description": "Base class of user interface components that can be used to display or edit value nodes.",
      "label": "Widget"
    },
    "ExploreAction": {
      "category": "class",
      "description": "An action typically showing up in an Explore section of a selected resource. Cannot make changes to the data.",
      "label": "Explore action"
    },
    "ResourceAction": {
      "category": "class",
      "description": "An Action that can be executed for a selected resource. Such Actions show up in context menus once they have been assigned a sh:group.",
      "label": "Resource action"
    },
    "FunctionTestCase": {
      "category": "class",
      "description": "A test case that verifies that a given SPARQL expression produces a given, expected result.",
      "label": "Function test case"
    },
    "GraphService": {
      "category": "class",
      "description": "A service that does not apply to a specific resource (as ResourceService does) but operates on the whole graph. The focusNode variable will be the URI of the current base graph (e.g. <urn:x-evn-master:geo> as a NamedNode.",
      "label": "Graph service"
    },
    "Service": {
      "category": "class",
      "description": "A script that gets exposed as a web service, e.g. /tbl/service/ex/MyService",
      "label": "Service"
    },
    "GraphStoreTestCase": {
      "category": "class",
      "description": "A test case that can be used to verify that an RDF file could be loaded (from a file) and that the resulting RDF graph is equivalent to a given TTL file.",
      "label": "Graph store test case"
    },
    "GraphValidationTestCase": {
      "category": "class",
      "description": "A test case that performs SHACL constraint validation on the whole graph and compares the results with the expected validation results stored with the test case. By default this excludes meta-validation (i.e. the validation of the shape definitions themselves). If that's desired, set dash:validateShapes to true.",
      "label": "Graph validation test case"
    },
    "ValidationTestCase": {
      "category": "class",
      "description": "Abstract superclass for test cases concerning SHACL constraint validation. Future versions may add new kinds of validatin test cases, e.g. to validate a single resource only.",
      "label": "Validation test case"
    },
    "IncludedScript": {
      "category": "class",
      "description": "The code associated with instances of this class will get injected into the generated APIs, as global code snippets. Typically used to declare libraries of utility functions or constants that are (compared to shape scripts) not necessarily associated with specific classes or shapes.  Note that the JavaScript code stored in dash:js cannot use the export keyword because the code must also work in external scripts (such as on Node.js). Instead, you need to enumerate the exported symbols via dash:exports.",
      "label": "Included script"
    },
    "InferencingTestCase": {
      "category": "class",
      "description": "A test case to verify whether an inferencing engine is producing identical results to those stored as expected results.",
      "label": "Inferencing test case"
    },
    "MultiViewer": {
      "category": "class",
      "description": "A viewer for multiple/all values at once.",
      "label": "Multi viewer"
    },
    "ModifyAction": {
      "category": "class",
      "description": "An action typically showing up in a Modify section of a selected resource. May make changes to the data.",
      "label": "Modify action"
    },
    "MultiEditor": {
      "category": "class",
      "description": "An editor for multiple/all value nodes at once.",
      "label": "Multi editor"
    },
    "Viewer": {
      "category": "class",
      "description": "The class of widgets for viewing value nodes.",
      "label": "Viewer"
    },
    "QueryTestCase": {
      "category": "class",
      "description": "A test case running a given SPARQL SELECT query and comparing its results with those stored as JSON Result Set in the expected result property.",
      "label": "Query test case"
    },
    "ResourceService": {
      "category": "class",
      "description": "A Service that can (and must) be applied to a given resource as focus node. Use dash:resourceService to link a class to the services that apply to its instances.",
      "label": "Resource service"
    },
    "ScriptConstraint": {
      "category": "class",
      "description": "The class of constraints that are based on Scripts. Depending on whether dash:onAllValues is set to true, these scripts can access the following pre-assigned variables:  - focusNode: the focus node of the constraint (a NamedNode) - if dash:onAllValues is not true: value: the current value node (e.g. a JavaScript string for xsd:string literals, a number for numeric literals or true or false for xsd:boolean literals. All other literals become LiteralNodes, and non-literals become instances of NamedNode) - if dash:onAllValues is true: values: an array of current value nodes, as above.  If the expression returns an array then each array member will be mapped to one validation result, following the mapping rules below.  For string results, a validation result will use the string as sh:resultMessage. For boolean results, a validation result will be produced if the result is false (true means no violation).  For object results, a validation result will be produced using the value of the field \"message\" of the object as result message. If the field \"value\" has a value then this will become the sh:value in the violation.  Unless another sh:message has been directly returned, the sh:message of the dash:ScriptConstraint will be used, similar to sh:message at SPARQL Constraints. These sh:messages can access the values {$focusNode}, {$value} etc as template variables.",
      "label": "Script constraint"
    },
    "ScriptSuggestionGenerator": {
      "category": "class",
      "description": "A Suggestion Generator that is backed by an Active Data Shapes script. The script needs to return a JSON object or an array of JSON objects if it shall generate multiple suggestions. It may also return null to indicate that nothing was suggested. Note that the whole script is evaluated as a (JavaScript) expression, and those will use the last value as result. So simply putting an object at the end of your script should do. Alternatively, define the bulk of the operation as a function and simply call that function in the script.  Each response object can have the following fields:  { message: \"The human readable message\",  // Defaults to the rdfs:label(s) of the suggestion generator add: [ // An array of triples to add, each triple as an array with three nodes [ subject, predicate, object ], [ ... ] ], delete: [ ... like add, for the triples to delete ] }  Suggestions with neither added nor deleted triples will be discarded.  At execution time, the script operates on the data graph as the active graph, with the following pre-bound variables: - focusNode: the NamedNode that is the sh:focusNode of the validation result - predicate: the NamedNode representing the predicate of the validation result, assuming sh:resultPath is a URI - value: the value node from the validation result's sh:value, cast into the most suitable JS object - the other pre-bound variables for the parameters of the constraint, e.g. in a sh:maxCount constraint it would be maxCount  The script will be executed in read-only mode, i.e. it cannot modify the graph.  Example with dash:js:  ({ message: `Copy labels into ${graph.localName(predicate)}`, add: focusNode.values(rdfs.label).map(label => [ focusNode, predicate, label ] ) })",
      "label": "Script suggestion generator"
    },
    "ScriptTestCase": {
      "category": "class",
      "description": "A test case that evaluates a script. Requires exactly one value for dash:js and will operate on the test case's graph (with imports) as both data and shapes graph.  Supports read-only scripts only at this stage.",
      "label": "Script test case"
    },
    "ScriptValidator": {
      "category": "class",
      "description": "A SHACL validator based on an Active Data Shapes script.  See the comment at dash:ScriptConstraint for the basic evaluation approach. Note that in addition to focusNode and value/values, the script can access pre-bound variables for each declared argument of the constraint component.",
      "label": "Script validator"
    },
    "abstract": {
      "category": "property",
      "description": "Indicates that a class is \"abstract\" and cannot be used in asserted rdf:type triples. Only non-abstract subclasses of abstract classes should be instantiated directly.",
      "label": "abstract"
    },
    "reifiableBy": {
      "category": "property",
      "description": "Can be used to specify the node shape that may be applied to reified statements produced by a property shape. The property shape must have a URI resource as its sh:path. The values of this property must be node shapes. User interfaces can use this information to determine which properties to present to users when reified statements are explored or edited. Use dash:None to indicate that no reification should be permitted.",
      "label": "reifiable by"
    },
    "closedByTypes": {
      "category": "property",
      "label": "closed by types"
    },
    "editor": {
      "category": "property",
      "description": "Can be used to link a property shape with an editor, to state a preferred editing widget in user interfaces.",
      "label": "editor"
    },
    "viewer": {
      "category": "property",
      "description": "Can be used to link a property shape with a viewer, to state a preferred viewing widget in user interfaces.",
      "label": "viewer"
    },
    "coExistsWith": {
      "category": "property",
      "description": "Specifies a property that must have a value whenever the property path has a value, and must have no value whenever the property path has no value.",
      "label": "co-exists with"
    },
    "localConstraint": {
      "category": "property",
      "description": "Can be set to true for those constraint components where the validation does not require to visit any other triples than the shape definitions and the direct property values of the focus node mentioned in the property constraints. Examples of this include sh:minCount and sh:hasValue.  Constraint components that are marked as such can be optimized by engines, e.g. they can be evaluated client-side at form submission time, without having to make a round-trip to a server, assuming the client has downloaded a complete snapshot of the resource.  Any component marked with dash:staticConstraint is also a dash:localConstraint.",
      "label": "local constraint"
    },
    "singleLine": {
      "category": "property",
      "label": "single line"
    },
    "hasValueIn": {
      "category": "property",
      "description": "Specifies a constraint that at least one of the value nodes must be a member of the given list.",
      "label": "has value in"
    },
    "hasValueWithClass": {
      "category": "property",
      "description": "Specifies a constraint that at least one of the value nodes must be an instance of a given class.",
      "label": "has value with class"
    },
    "indexed": {
      "category": "property"
    },
    "rootClass": {
      "category": "property",
      "label": "root class"
    },
    "hidden": {
      "category": "property",
      "description": "Properties marked as hidden do not appear in user interfaces, yet remain part of the shape for other purposes such as validation and scripting or GraphQL schema generation.",
      "label": "hidden"
    },
    "stem": {
      "category": "property",
      "description": "Specifies a string value that the IRI of the value nodes must start with.",
      "label": "stem"
    },
    "staticConstraint": {
      "category": "property",
      "description": "Can be set to true for those constraint components where the validation does not require to visit any other triples than the parameters. Examples of this include sh:datatype or sh:nodeKind, where no further triples need to be queried to determine the result.  Constraint components that are marked as such can be optimized by engines, e.g. they can be evaluated client-side at form submission time, without having to make a round-trip to a server.",
      "label": "static constraint"
    },
    "subSetOf": {
      "category": "property",
      "label": "sub set of"
    },
    "symmetric": {
      "category": "property",
      "description": "True to declare that the associated property path is symmetric.",
      "label": "symmetric"
    },
    "uniqueValueForClass": {
      "category": "property",
      "label": "unique value for class"
    },
    "actionGroup": {
      "category": "property",
      "description": "Links an Action with the ActionGroup that it should be arranged in.",
      "label": "action group"
    },
    "actionIconClass": {
      "category": "property",
      "description": "The (CSS) class of an Action for display purposes alongside the label.",
      "label": "action icon class"
    },
    "addedTriple": {
      "category": "property",
      "description": "May link a dash:GraphUpdate with one or more triples (represented as instances of rdf:Statement) that should be added to fix the source of the result.",
      "label": "added triple"
    },
    "apiStatus": {
      "category": "property",
      "description": "Defines how and whether the associated feature is part of an external API. APIs may be implemented as (REST) web services, via GraphQL or ADS Script APIs.",
      "label": "API status"
    },
    "applicableToClass": {
      "category": "property",
      "description": "Can be used to state that a shape is applicable to instances of a given class. This is a softer statement than \"target class\": a target means that all instances of the class must conform to the shape. Being applicable to simply means that the shape may apply to (some) instances of the class. This information can be used by algorithms or humans.",
      "label": "applicable to class"
    },
    "cachable": {
      "category": "property",
      "description": "If set to true then the results of the SHACL function can be cached in between invocations with the same arguments. In other words, they are stateless and do not depend on triples in any graph, or the current time stamp etc.",
      "label": "cachable"
    },
    "composite": {
      "category": "property",
      "description": "Can be used to indicate that a property/path represented by a property constraint represents a composite relationship. In a composite relationship, the life cycle of a \"child\" object (value of the property/path) depends on the \"parent\" object (focus node). If the parent gets deleted, then the child objects should be deleted, too. Tools may use dash:composite (if set to true) to implement cascading delete operations.",
      "label": "composite"
    },
    "contextFree": {
      "category": "property",
      "description": "Used to mark certain parameterizables as context-free, meaning that the outcome of a process does not depend on the currently active query graph.",
      "label": "context-free"
    },
    "defaultLang": {
      "category": "property",
      "description": "Can be used to annotate a graph (usually the owl:Ontology) with the default language that tools should suggest for new literal values. For example, predominantly English graphs should have \"en\" as default language.",
      "label": "default language"
    },
    "defaultViewForRole": {
      "category": "property",
      "description": "Links a node shape with the roles for which it shall be used as default view. User interfaces can use these values to select how to present a given RDF resource. The values of this property are URIs representing a group of users or agents. There is a dedicated URI dash:all representing all users.",
      "label": "default view for role"
    },
    "deletedTriple": {
      "category": "property",
      "description": "May link a dash:GraphUpdate result with one or more triples (represented as instances of rdf:Statement) that should be deleted to fix the source of the result.",
      "label": "deleted triple"
    },
    "dependencyPredicate": {
      "category": "property",
      "description": "Can be used in dash:js node expressions to enumerate the predicates that the computation of the values may depend on. This can be used by clients to determine whether an edit requires re-computation of values on a form or elsewhere. For example, if the dash:js is something like \"focusNode.firstName + focusNode.lastName\" then the dependency predicates should be ex:firstName and ex:lastName.",
      "label": "dependency predicate"
    },
    "detailsEndpoint": {
      "category": "property",
      "description": "Can be used to link a SHACL property shape with the URL of a SPARQL endpoint that may contain further RDF triples for the value nodes delivered by the property. This can be used to inform a processor that it should switch to values from an external graph when the user wants to retrieve more information about a value.  This property should be regarded as an \"annotation\", i.e. it does not have any impact on validation or other built-in SHACL features. However, selected tools may want to use this information. One implementation strategy would be to periodically fetch the values specified by the sh:node or sh:class shape associated with the property, using the property shapes in that shape, and add the resulting triples into the main query graph.  An example value is \"https://query.wikidata.org/sparql\".",
      "label": "details endpoint"
    },
    "detailsGraph": {
      "category": "property",
      "description": "Can be used to link a SHACL property shape with a SHACL node expression that produces the URIs of one or more graphs that contain further RDF triples for the value nodes delivered by the property. This can be used to inform a processor that it should switch to another data graph when the user wants to retrieve more information about a value.  The node expressions are evaluated with the focus node as input. (It is unclear whether there are also cases where the result may be different for each specific value, in which case the node expression would need a second input argument).  This property should be regarded as an \"annotation\", i.e. it does not have any impact on validation or other built-in SHACL features. However, selected tools may want to use this information.",
      "label": "details graph"
    },
    "expectedResult": {
      "category": "property",
      "description": "The expected result(s) of a test case. The value range of this property is different for each kind of test cases.",
      "label": "expected result"
    },
    "expectedResultIsJSON": {
      "category": "property",
      "description": "A flag to indicate that the expected result represents a JSON string. If set to true, then tests would compare JSON structures (regardless of whitespaces) instead of actual syntax.",
      "label": "expected result is JSON"
    },
    "expectedResultIsTTL": {
      "category": "property",
      "description": "A flag to indicate that the expected result represents an RDF graph encoded as a Turtle file. If set to true, then tests would compare graphs instead of actual syntax.",
      "label": "expected result is Turtle"
    },
    "fixed": {
      "category": "property",
      "description": "Can be used to mark that certain validation results have already been fixed.",
      "label": "fixed"
    },
    "height": {
      "category": "property",
      "description": "The height.",
      "label": "height"
    },
    "index": {
      "category": "property",
      "label": "index"
    },
    "js": {
      "category": "property",
      "description": "The JavaScript source code of a Script.",
      "label": "JavaScript source code"
    },
    "mimeTypes": {
      "category": "property",
      "description": "For file-typed properties, this can be used to specify the expected/allowed mime types of its values. This can be used, for example, to limit file input boxes or file selectors. If multiple values are allowed then they need to be separated by commas.  Example values are listed at https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types",
      "label": "mime types"
    },
    "neverMaterialize": {
      "category": "property",
      "description": "If set to true at a property shape then any sh:values and sh:defaultValue rules of this property will be ignored when 'all inferences' are computed. This is useful for property values that shall only be computed for individual focus nodes (e.g. when a user visits a resource) but not for large inference runs.",
      "label": "never materialize"
    },
    "onAllValues": {
      "category": "property",
      "description": "If set to true for a ScriptConstraint or ScriptValidator, then the associated script will receive all value nodes at once, as a value of the variable values. By default (or false), the script is called for each value node individually.",
      "label": "on all values"
    },
    "propertySuggestionGenerator": {
      "category": "property",
      "description": "Links the constraint component with instances of dash:SuggestionGenerator that may be used to produce suggestions for a given validation result that was produced by a property constraint.",
      "label": "property suggestion generator"
    },
    "readOnly": {
      "category": "property",
      "description": "Used as a hint for user interfaces that values of the associated property should not be editable. The values of this may be the boolean literals true or false or, more generally, a SHACL node expression that must evaluate to true or false.",
      "label": "read only"
    },
    "resourceAction": {
      "category": "property",
      "description": "Links a class with the Resource Actions that can be applied to instances of that class.",
      "label": "resource action"
    },
    "shape": {
      "category": "property",
      "description": "States that a subject resource has a given shape. This property can, for example, be used to capture results of SHACL validation on static data.",
      "label": "shape"
    },
    "shapeScript": {
      "category": "property",
      "label": "shape script"
    },
    "suggestion": {
      "category": "property",
      "description": "Can be used to link a result with one or more suggestions on how to address or improve the underlying issue.",
      "label": "suggestion"
    },
    "suggestionConfidence": {
      "category": "property",
      "description": "An optional confidence between 0% and 100%. Suggestions with 100% confidence are strongly recommended. Can be used to sort recommended updates.",
      "label": "suggestion confidence"
    },
    "suggestionGenerator": {
      "category": "property",
      "description": "Links a sh:SPARQLConstraint or sh:JSConstraint with instances of dash:SuggestionGenerator that may be used to produce suggestions for a given validation result that was produced by the constraint.",
      "label": "suggestion generator"
    },
    "suggestionGroup": {
      "category": "property",
      "description": "Can be used to link a suggestion with the group identifier to which it belongs. By default this is a link to the dash:SuggestionGenerator, but in principle this could be any value.",
      "label": "suggestion"
    },
    "validateShapes": {
      "category": "property",
      "description": "True to also validate the shapes itself (i.e. parameter declarations).",
      "label": "validate shapes"
    },
    "width": {
      "category": "property",
      "description": "The width.",
      "label": "width"
    },
    "x": {
      "category": "property",
      "description": "The x position.",
      "label": "x"
    },
    "y": {
      "category": "property",
      "description": "The y position.",
      "label": "y"
    }
  }
}